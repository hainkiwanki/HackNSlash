using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

public class PlayerAI : MonoBehaviour
{
    // Test commit
    [SerializeField] GameObject m_markerPrefab;
    [SerializeField] NavMeshAgent m_playerAIagent;
    [SerializeField] EnemyHolder m_enemyHolder;

    private GameObject m_marker;
    private float m_movementSpeed = 0.0f;
    private Vector3 m_forward, m_lastDirection;
    private float m_distanceToMarker = 0.0f;

    private float m_radius = 3.0f;
    private float m_step = 1.0f;
    private List<Enemy> m_targetedEnemies = new List<Enemy>();
    private bool m_isAttacking = false;

    public float Speed => m_movementSpeed;

    void Start()
    {
        m_marker = Instantiate(m_markerPrefab, Vector3.zero, Quaternion.identity);
    }

    private void Update()
    {
        if(InputManager.Instance.RightClick)
        {
            m_playerAIagent.enabled = true;
            m_targetedEnemies.Clear();
            m_enemyHolder.ResetEnemies();
            m_marker.transform.position = (m_playerAIagent.destination = InputManager.Instance.MouseWorldPos);
            m_playerAIagent.enabled = false;
            Vector3 direction = m_marker.transform.position - transform.position;

            var currentPosition = transform.position;
            for(float i = 0; i < direction.magnitude; i++)
            {
                currentPosition += direction.normalized * i;
                GetEnemiesInCircleAtPoint(currentPosition);
                i += m_step;
                if(i > direction.magnitude)
                {
                    currentPosition += direction.normalized * i;
                    GetEnemiesInCircleAtPoint(currentPosition);
                }
            }
            m_targetedEnemies.Sort(SortEnemiesOnDistance);
            StartCoroutine(AttackEnemies());
        }

        m_distanceToMarker = Vector3.Distance(transform.position, m_marker.transform.position);
        if (InputManager.Instance.LeftClick || InputManager.Instance.HoldLeftClick)
        {
            var distanceToMouse = Vector3.Distance(transform.position.NewY(0.0f), InputManager.Instance.MouseWorldPos.NewY(0.0f));
            if(distanceToMouse > 0.5f)
            {
                m_marker.transform.position = InputManager.Instance.MouseWorldPos;
            }
        
            if(InputManager.Instance.HoldLeftClick && distanceToMouse <= 0.5f)
            {
                m_marker.transform.position = OffsetRaycastedPos(RayCastTowardsPlayer(InputManager.Instance.MouseWorldPos));
                if (distanceToMouse < 0.3f)
                { 
                    m_marker.transform.position = transform.position + m_lastDirection;
                }
            }
        }
    }

    void LateUpdate()
    {
        m_lastDirection = m_marker.transform.position - transform.position;
        if (m_playerAIagent.enabled)
        {
            if (m_distanceToMarker >= m_playerAIagent.stoppingDistance)
            {
                m_movementSpeed = 4.0f;
                m_playerAIagent.destination = m_marker.transform.position;
            }
            else
                m_movementSpeed = 0.0f;

            if (m_playerAIagent.enabled)
                m_playerAIagent.speed = m_movementSpeed;
        }
    }

    private Vector3 OffsetRaycastedPos(Vector3 _pos)
    {
        var dir = _pos - transform.position;
        return (transform.position + dir.normalized).NewY(0.0f);
    }

    private Vector3 RayCastTowardsPlayer(Vector3 _fromPos)
    {
        var dir = transform.position.NewY(0.0f) - _fromPos.NewY(0.0f);
        Ray ray = new Ray(_fromPos, dir);
        RaycastHit hitInfo;
        if(Physics.Raycast(ray, out hitInfo, 50.0f, 1 << 9) && InputManager.Instance.DeltaMousePos != Vector2.zero)
        {
            return hitInfo.point;
        }
        return m_marker.transform.position;
    }

    private void GetEnemiesInCircleAtPoint(Vector3 _center)
    {
        foreach(var enemy in m_enemyHolder.m_enemies)
        {
            if (!m_targetedEnemies.Contains(enemy))
            {
                var distance = Vector3.Distance(_center, enemy.transform.position);
                var playerToEnemy = enemy.transform.position - transform.position;
                var playerToEnd = m_marker.transform.position - transform.position;
                var dotProduct = Vector3.Dot(playerToEnemy, playerToEnd.normalized);
                if(dotProduct > 0 && dotProduct <= playerToEnd.magnitude && distance <= m_radius)
                {
                    m_targetedEnemies.Add(enemy);
                    enemy.SelectEnemy();
                }
            }
        }
    }

    private int SortEnemiesOnDistance(Enemy _e1, Enemy _e2)
    {
        var distE1 = Vector3.Distance(transform.position, _e1.transform.position);
        var distE2 = Vector3.Distance(transform.position, _e2.transform.position);
        return distE1.CompareTo(distE2);
    }

    IEnumerator AttackEnemies()
    {
        m_isAttacking = true;
        for(int i = 0; i < m_targetedEnemies.Count; i++)
        {
            var direction = (transform.position - m_targetedEnemies[i].transform.position).normalized * 0.3f;
            transform.position = m_targetedEnemies[i].transform.position - direction;
            yield return new WaitForSeconds(0.2f);
        }
        transform.position = m_marker.transform.position;
        m_isAttacking = false;
        m_playerAIagent.enabled = true;
    }
}
